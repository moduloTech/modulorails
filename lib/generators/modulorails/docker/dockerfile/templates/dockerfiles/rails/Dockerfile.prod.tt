# syntax = docker/dockerfile:1

# This Dockerfile is designed for production, not development.
# It is adapted from Rails 7.2 default Dockerfile with Modulotech's twist to fit the use of Alpine.

# Make sure RUBY_VERSION matches the Ruby version in .ruby-version
ARG RUBY_VERSION=<%= @data.ruby_version %>
FROM docker.io/library/ruby:$RUBY_VERSION-alpine AS base

# Rails app lives here
WORKDIR /rails

# Install base packages
RUN apk add --update --no-cache \
    tzdata \
    shared-mime-info \
    vim \
    jemalloc \
    vips \
    <%- if @adapter =~ /mysql/ -%>
    mysql-client
    <%- else -%>
    postgresql-client
    <%- end -%>

# Set production environment
ENV RAILS_ENV="production" \
    BUNDLE_DEPLOYMENT="1" \
    BUNDLE_PATH="/usr/local/bundle" \
    BUNDLE_WITHOUT="development"

# Throw-away build stage to reduce size of final image
FROM base AS build

# Install packages needed to build gems
RUN apk add --update --no-cache \
    alpine-sdk \
    nodejs \
    tzdata \
    yarn \
    shared-mime-info \
    gcompat \
    <%- if @adapter =~ /mysql/ -%>
    mysql-dev
    <%- else -%>
    postgresql-dev
    <%- end -%>

# Install application gems
RUN gem install bundler -v <%= @data.bundler_version %>

COPY Gemfile Gemfile.lock ./
RUN bundle install && \
    rm -rf ~/.bundle/ "${BUNDLE_PATH}"/ruby/*/cache "${BUNDLE_PATH}"/ruby/*/bundler/gems/*/.git && \
    bundle exec bootsnap precompile --gemfile

<%- if @webpack_container_needed -%>
COPY package.json yarn.lock ./
RUN yarn install
<%- end-%>

# Copy application code
COPY . .

# Precompile bootsnap code for faster boot times
RUN bundle exec bootsnap precompile app/ lib/

# Precompiling assets for production without requiring secret RAILS_MASTER_KEY
RUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile




# Final stage for app image
FROM base

# Copy built artifacts: gems, application
COPY --from=build "${BUNDLE_PATH}" "${BUNDLE_PATH}"
COPY --from=build /rails /rails

# Run and own only the runtime files as a non-root user for security
RUN addgroup -S -g 1000 rails && \
    adduser rails -u 1000 -G rails -h /home/rails -s /bin/sh -D && \
    chown -R rails:rails db log storage tmp
USER 1000:1000

# Entrypoint prepares the database.
ENTRYPOINT ["/rails/bin/docker-entrypoint"]

# Start the server by default, this can be overwritten at runtime
EXPOSE 3000
CMD ["./bin/rails", "server"]
